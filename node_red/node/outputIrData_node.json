[{"id":"ecfea1b9.a306d","type":"serial in","z":"c797c48b.b6b498","name":"UART用入力ノード","serial":"d542a3c0.25fef8","x":135.75,"y":507.5,"wires":[["387f312f.f887d6"]]},{"id":"79aeea29.894cbc","type":"serial out","z":"c797c48b.b6b498","name":"UART用出力ノード","serial":"d542a3c0.25fef8","x":726.75,"y":367.5,"wires":[]},{"id":"cc493840.a5998","type":"function","z":"c797c48b.b6b498","name":"コマンド送信","func":"//// CRCテーブル\nvar CRC8Table = [\n    0x00, 0x85, 0x8F, 0x0A, 0x9B, 0x1E, 0x14, 0x91,\n    0xB3, 0x36, 0x3C, 0xB9, 0x28, 0xAD, 0xA7, 0x22,\n    0xE3, 0x66, 0x6C, 0xE9, 0x78, 0xFD, 0xF7, 0x72,\n    0x50, 0xD5, 0xDF, 0x5A, 0xCB, 0x4E, 0x44, 0xC1,\n    0x43, 0xC6, 0xCC, 0x49, 0xD8, 0x5D, 0x57, 0xD2,\n    0xF0, 0x75, 0x7F, 0xFA, 0x6B, 0xEE, 0xE4, 0x61,\n    0xA0, 0x25, 0x2F, 0xAA, 0x3B, 0xBE, 0xB4, 0x31,\n    0x13, 0x96, 0x9C, 0x19, 0x88, 0x0D, 0x07, 0x82,\n    \n    0x86, 0x03, 0x09, 0x8C, 0x1D, 0x98, 0x92, 0x17,\n    0x35, 0xB0, 0xBA, 0x3F, 0xAE, 0x2B, 0x21, 0xA4,\n    0x65, 0xE0, 0xEA, 0x6F, 0xFE, 0x7B, 0x71, 0xF4,\n    0xD6, 0x53, 0x59, 0xDC, 0x4D, 0xC8, 0xC2, 0x47,\n    0xC5, 0x40, 0x4A, 0xCF, 0x5E, 0xDB, 0xD1, 0x54,\n    0x76, 0xF3, 0xF9, 0x7C, 0xED, 0x68, 0x62, 0xE7,\n    0x26, 0xA3, 0xA9, 0x2C, 0xBD, 0x38, 0x32, 0xB7,\n    0x95, 0x10, 0x1A, 0x9F, 0x0E, 0x8B, 0x81, 0x04,\n    \n    0x89, 0x0C, 0x06, 0x83, 0x12, 0x97, 0x9D, 0x18,\n    0x3A, 0xBF, 0xB5, 0x30, 0xA1, 0x24, 0x2E, 0xAB,\n    0x6A, 0xEF, 0xE5, 0x60, 0xF1, 0x74, 0x7E, 0xFB,\n    0xD9, 0x5C, 0x56, 0xD3, 0x42, 0xC7, 0xCD, 0x48,\n    0xCA, 0x4F, 0x45, 0xC0, 0x51, 0xD4, 0xDE, 0x5B,\n    0x79, 0xFC, 0xF6, 0x73, 0xE2, 0x67, 0x6D, 0xE8,\n    0x29, 0xAC, 0xA6, 0x23, 0xB2, 0x37, 0x3D, 0xB8,\n    0x9A, 0x1F, 0x15, 0x90, 0x01, 0x84, 0x8E, 0x0B,\n    \n    0x0F, 0x8A, 0x80, 0x05, 0x94, 0x11, 0x1B, 0x9E,\n    0xBC, 0x39, 0x33, 0xB6, 0x27, 0xA2, 0xA8, 0x2D,\n    0xEC, 0x69, 0x63, 0xE6, 0x77, 0xF2, 0xF8, 0x7D,\n    0x5F, 0xDA, 0xD0, 0x55, 0xC4, 0x41, 0x4B, 0xCE,\n    0x4C, 0xC9, 0xC3, 0x46, 0xD7, 0x52, 0x58, 0xDD,\n    0xFF, 0x7A, 0x70, 0xF5, 0x64, 0xE1, 0xEB, 0x6E,\n    0xAF, 0x2A, 0x20, 0xA5, 0x34, 0xB1, 0xBB, 0x3E,\n    0x1C, 0x99, 0x93, 0x16, 0x87, 0x02, 0x08, 0x8D\n];\n\n//// CRCを計算します\nfunction CRC8(byte_array, buf_length) {\n  var crc = 0\n\n  for (var i = 0; i < buf_length; i++ ) \n    crc = CRC8Table[(crc ^ byte_array[i]) % 256] \n\n  return crc;\n} \n\n\n//////////////////////////////////////////////\n// 送信コマンドを通信データフォーマットに変換します \n//////////////////////////////////////////////\nvar command = [];   // 通信フォーマットデータ格納用\nvar data_buf = msg.payload; // コマンドデータ\nvar length = msg.payload.length;    // コマンドデータ長\n\n// コマンドデータのCRCを計算\nmsg.crc = CRC8(data_buf, length);   \n\n// 通信フォーマットデータ作成\ncommand[0] = 0x7E;      // SYNコード(固定)  \ncommand[1] = 0xAA;      // ヘッダー(固定)\n\nvar j=0;\n\n// ペイロードバイト数(HiByte)\nvar len_hi = ((length >> 8) & 0xFF);  \nif((len_hi == 0x7D) || (len_hi == 0x7E))    // SYN(0x7E)またはESC(0x7D)がある場合\n{\n    command[2] = 0x7D;                      // 0x7D(ESC)を追加して\n    j++;\n    command[2+j] = (len_hi ^ 0x20);         // 0x20で排他的論理和する\n}\nelse\n{\n    command[2] = len_hi;                    // そのまま追加 \n}\nj++;\n\n// ペイロードバイト数(LoByte)\nvar len_lo = (length & 0xFF);  \nif((len_lo == 0x7D) || (len_lo == 0x7E))    //SYN(0x7E)またはESC(0x7D)がある場合\n{\n    command[2+j] = 0x7D;                    // 0x7D(ESC)を追加して\n    j++;\n    command[2+j] = (len_lo ^ 0x20);         // 0x20で排他的論理和する\n}\nelse\n{\n    command[2+j] = len_lo;                  // そのまま追加 \n}\nj++;\n\n\n// コマンドデータをペイロードに代入\nfor(var i=0; i<length; i++)\n{\n    if((data_buf[i] == 0x7D) || data_buf[i] == 0x7E)    //SYN(0x7E)またはESC(0x7D)がある場合\n    {\n        command[2+j] = 0x7D;                            // 0x7D(ESC)を追加して\n        j++;\n        command[2+j] = (data_buf[i] ^ 0x20);            // 0x20で排他的論理和する\n    }\n    else\n    {\n        command[2+j] = data_buf[i];                     // そのまま追加 \n    }\n    j++;\n}\n\n// CRC追加\nif((msg.crc == 0x7D) || (msg.crc == 0x7E))  //SYN(0x7E)またはESC(0x7D)がある場合\n{\n    command[2+j] = 0x7D;                    // 0x7D(ESC)を追加して\n    j++;\n    command[2+j] = msg.crc ^ 0x20;          // 0x20で排他的論理和する\n}\nelse\n{\n    command[2+j] = msg.crc;                 // そのまま追加     \n}\nj++;\n\ncommand[2+j] = 0x7E;  // SYNコード(固定)\n\nmsg.payload  = new Buffer(command);\n\nreturn msg;\n\n\n\n","outputs":1,"noerr":0,"x":491.75,"y":368.75,"wires":[["79aeea29.894cbc"]]},{"id":"6af03ccd.e9d30c","type":"inject","z":"c797c48b.b6b498","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":177,"y":197,"wires":[["894cce3a.902d38"]]},{"id":"387f312f.f887d6","type":"function","z":"c797c48b.b6b498","name":"受信コマンド抽出","func":"//// CRCテーブル\nvar CRC8Table = [\n  0x00, 0x85, 0x8F, 0x0A, 0x9B, 0x1E, 0x14, 0x91,\n  0xB3, 0x36, 0x3C, 0xB9, 0x28, 0xAD, 0xA7, 0x22,\n  0xE3, 0x66, 0x6C, 0xE9, 0x78, 0xFD, 0xF7, 0x72,\n  0x50, 0xD5, 0xDF, 0x5A, 0xCB, 0x4E, 0x44, 0xC1,\n  0x43, 0xC6, 0xCC, 0x49, 0xD8, 0x5D, 0x57, 0xD2,\n  0xF0, 0x75, 0x7F, 0xFA, 0x6B, 0xEE, 0xE4, 0x61,\n  0xA0, 0x25, 0x2F, 0xAA, 0x3B, 0xBE, 0xB4, 0x31,\n  0x13, 0x96, 0x9C, 0x19, 0x88, 0x0D, 0x07, 0x82,\n  \n  0x86, 0x03, 0x09, 0x8C, 0x1D, 0x98, 0x92, 0x17,\n  0x35, 0xB0, 0xBA, 0x3F, 0xAE, 0x2B, 0x21, 0xA4,\n  0x65, 0xE0, 0xEA, 0x6F, 0xFE, 0x7B, 0x71, 0xF4,\n  0xD6, 0x53, 0x59, 0xDC, 0x4D, 0xC8, 0xC2, 0x47,\n  0xC5, 0x40, 0x4A, 0xCF, 0x5E, 0xDB, 0xD1, 0x54,\n  0x76, 0xF3, 0xF9, 0x7C, 0xED, 0x68, 0x62, 0xE7,\n  0x26, 0xA3, 0xA9, 0x2C, 0xBD, 0x38, 0x32, 0xB7,\n  0x95, 0x10, 0x1A, 0x9F, 0x0E, 0x8B, 0x81, 0x04,\n  \n  0x89, 0x0C, 0x06, 0x83, 0x12, 0x97, 0x9D, 0x18,\n  0x3A, 0xBF, 0xB5, 0x30, 0xA1, 0x24, 0x2E, 0xAB,\n  0x6A, 0xEF, 0xE5, 0x60, 0xF1, 0x74, 0x7E, 0xFB,\n  0xD9, 0x5C, 0x56, 0xD3, 0x42, 0xC7, 0xCD, 0x48,\n  0xCA, 0x4F, 0x45, 0xC0, 0x51, 0xD4, 0xDE, 0x5B,\n  0x79, 0xFC, 0xF6, 0x73, 0xE2, 0x67, 0x6D, 0xE8,\n  0x29, 0xAC, 0xA6, 0x23, 0xB2, 0x37, 0x3D, 0xB8,\n  0x9A, 0x1F, 0x15, 0x90, 0x01, 0x84, 0x8E, 0x0B,\n  \n  0x0F, 0x8A, 0x80, 0x05, 0x94, 0x11, 0x1B, 0x9E,\n  0xBC, 0x39, 0x33, 0xB6, 0x27, 0xA2, 0xA8, 0x2D,\n  0xEC, 0x69, 0x63, 0xE6, 0x77, 0xF2, 0xF8, 0x7D,\n  0x5F, 0xDA, 0xD0, 0x55, 0xC4, 0x41, 0x4B, 0xCE,\n  0x4C, 0xC9, 0xC3, 0x46, 0xD7, 0x52, 0x58, 0xDD,\n  0xFF, 0x7A, 0x70, 0xF5, 0x64, 0xE1, 0xEB, 0x6E,\n  0xAF, 0x2A, 0x20, 0xA5, 0x34, 0xB1, 0xBB, 0x3E,\n  0x1C, 0x99, 0x93, 0x16, 0x87, 0x02, 0x08, 0x8D\n];\n\n//// CRCを計算します\nfunction CRC8(byte_array, buf_length) {\nvar crc = 0\n\nfor (var i = 0; i < buf_length; i++ ) \n  crc = CRC8Table[(crc ^ byte_array[i]) % 256] \n\nreturn crc;\n} \n\n\n////////////////////////////////////////////////////////\n// 受信コマンドの解析を行い、ペイロードを抽出します \n////////////////////////////////////////////////////////\nvar command = [];                   // 通信フォーマットデータ格納用\nvar length = msg.payload.length;    // コマンドデータ長\n\n// 先頭のSYN(0x7E)の確認\nif(msg.payload[0] !== 0x7E)\n{\n  node.error(\"先頭のSYNがありません\", msg);\n}\n// ヘッダー(0xAA)の確認\nif(msg.payload[1] !== 0xAA)\n{\n  node.error(\"ヘッダーがありません\", msg);\n}\n// 最後のSYN(0x7E)の確認\nif(msg.payload[length-1] !== 0x7E)\n{\n  node.error(\"最後のSYNがありません\", msg);\n}\n\nvar i = 0;\n// ペイロードバイト数(HiByte)\nvar len_hi = msg.payload[2];  \nif(len_hi === 0x7D)  // ESC(0x7D)の場合\n{\n  i++;\n  len_hi = (msg.payload[2+i] ^ 0x20);         // 次のバイトを0x20で排他的論理和する\n}\n// ペイロードバイト数(LoByte)\nvar len_lo = msg.payload[3+i];  \nif(len_lo === 0x7D)  // ESC(0x7D)の場合\n{\n  i++;\n  len_lo = (msg.payload[3+i] ^ 0x20);         // 次のバイトを0x20で排他的論理和する\n}\nvar count = ((len_hi << 8) & 0xFF00) + len_lo;    // ペイロード長を保存\n\n// ペイロードデータを保存\nfor(var j=0; j<count; j++)\n{\n  if(msg.payload[4+j+i] == 0x7D)    //SYN(0x7E)またはESC(0x7D)がある場合\n  {\n      i++;\n      command[0+j] = (msg.payload[4+j+i] ^ 0x20);            // 0x20で排他的論理和する\n  }\n  else\n  {\n      command[0+j] = msg.payload[4+j+i];                     // そのまま追加 \n  }\n}\n\n// 受信コマンド内のCRCを保存\nvar crc = msg.payload[4+j+i];\nif(crc === 0x7D)  // ESC(0x7D)の場合\n{\n  crc = (msg.payload[5+J+i] ^ 0x20);         // 次のバイトを0x20で排他的論理和する\n}\n// コマンドデータのCRCを計算\ncommandCrc = CRC8(command, count);\n// CRCを比較\nif(commandCrc !== crc)\n{\n  node.error(\"CRCが正しくありません\", msg);\n}\n\n// ペイロード抽出\nmsg.payload  = new Buffer(command);\nreturn msg;\n\n\n\n","outputs":"1","noerr":0,"x":355.75,"y":508.75,"wires":[["76a39adf.4c3614"]]},{"id":"76a39adf.4c3614","type":"switch","z":"c797c48b.b6b498","name":"コマンド判定","property":"payload[0]","propertyType":"msg","rules":[{"t":"eq","v":"0x01","vt":"num"},{"t":"eq","v":"0x02","vt":"num"},{"t":"eq","v":"0x03","vt":"num"},{"t":"eq","v":"0xD0","vt":"num"},{"t":"else"}],"checkall":"true","outputs":5,"x":564.75,"y":509,"wires":[["fff6c679.5f49e8"],[],[],[],[]]},{"id":"2a1741ac.1e2b26","type":"comment","z":"c797c48b.b6b498","name":"コマンド結果受信","info":"","x":170,"y":432,"wires":[]},{"id":"a3fdb79.5bd3fc8","type":"comment","z":"c797c48b.b6b498","name":"赤外線信号出力","info":"","x":174,"y":143,"wires":[]},{"id":"b026596a.8822c","type":"debug","z":"c797c48b.b6b498","name":"","active":true,"console":"false","complete":"false","x":1069,"y":477.5,"wires":[]},{"id":"894cce3a.902d38","type":"file in","z":"c797c48b.b6b498","name":"","filename":"/home/pi/RPi-IREX/irData.json","format":"utf8","chunk":false,"sendError":false,"x":423.25,"y":196.5,"wires":[["82345f80.e91be8"]]},{"id":"82345f80.e91be8","type":"json","z":"c797c48b.b6b498","name":"","pretty":false,"x":662.456298828125,"y":198.95947265625,"wires":[["d6e7b7d3.f575d"]]},{"id":"d6e7b7d3.f575d","type":"function","z":"c797c48b.b6b498","name":"赤外線信号送出(0x01)","func":"var length = msg.payload.DataLength;\nvar buf = [];\n\nbuf[0] = 0x01; // 送信コマンド\nbuf[1] = msg.payload.FormatType; // SONY:0x01 それ以外:0x00\nbuf[2] = (length >> 8 & 0xFF); // 赤外線送信バイト数 Hiバイト\nbuf[3] = (length & 0xFF); // 赤外線送信バイト数 Loバイト\n\n\nfor(i = 0; i < length ; i++)\n{\n    buf[4+i] = msg.payload.SignalData[i];\n}\n\n//msg.payload.length = length + 4;\nmsg.payload  = new Buffer(buf);\nreturn msg;","outputs":1,"noerr":0,"x":847.9761962890625,"y":197.681640625,"wires":[["cc493840.a5998"]]},{"id":"fff6c679.5f49e8","type":"function","z":"c797c48b.b6b498","name":"赤外線信号送出コマンド応答確認","func":"var retCode = msg.payload[1];\n\nif(retCode === 0x00)\n{\n    msg.payload = \"赤外線信号送出コマンド: 正常終了\";\n}\nelse\n{\n    msg.payload = \"赤外線信号送出コマンド: エラー:\" + retCode;\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":824.75,"y":480.75,"wires":[["b026596a.8822c"]]},{"id":"d542a3c0.25fef8","type":"serial-port","z":"","serialport":"/dev/ttyS0","serialbaud":"115200","databits":"8","parity":"none","stopbits":"1","newline":"100","bin":"bin","out":"time","addchar":false}]